{"version":3,"file":"static/js/387.26d45d8e.chunk.js","mappings":"oRAEaA,EAAOC,EAAAA,GAAAA,GAAH,+HAQJC,EAAOD,EAAAA,GAAAA,GAAH,oFAMJE,EAAQF,EAAAA,GAAAA,IAAH,mFAMLG,EAAYH,EAAAA,GAAAA,EAAH,yFAMTI,EAAYJ,EAAAA,GAAAA,EAAH,oEAKTK,EAASL,EAAAA,GAAAA,EAAH,yF,SCsCnB,EA1Da,WACX,OAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,+GAE2BC,EAAAA,GAAsBH,GAFjD,gBAEYN,EAFZ,EAEYA,KACRC,EAAQD,GACRG,EAAU,YAJd,gDAMIE,EAAS,KAAMK,SACfP,EAAU,YAPd,0DAHc,sBACdA,EAAU,WADI,mCAadQ,EACD,GAAE,CAACL,IAECN,GAKH,gCACc,aAAXE,IAAyB,wBAAKE,KAC/B,SAACZ,EAAD,UACc,aAAXU,GACCF,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,GAAIC,EAA3B,EAA2BA,UAA3B,OACP,UAACtB,EAAD,WACoB,OAAjBoB,IACC,SAACnB,EAAD,CACEsB,IAAG,yCAAoCH,GACvCI,IAAI,UAGR,SAACtB,EAAD,UAAYiB,KACZ,UAAChB,EAAD,yBAAuBmB,OARdD,EADJ,MAaD,aAAXb,GAAyC,IAAhBF,EAAKmB,SAC7B,SAACrB,EAAD,sDAtBG,IA0BV,C,+LC7DKsB,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,qCAGXC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAQ,mCAAG,sGACCD,EAAAA,EAAAA,IAAA,8BAAiCH,IADlC,uBACdK,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRC,EAAY,mCAAG,WAAMX,GAAN,yFACHQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,YAA0BK,IADvB,uBAClBK,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZE,EAAW,mCAAG,WAAMZ,GAAN,yFACFQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,oBAAkCK,IADhC,uBACjBK,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXG,EAAa,mCAAG,WAAMb,GAAN,yFACJQ,EAAAA,EAAAA,IAAA,iBAAoBR,EAApB,oBAAkCK,IAD9B,uBACnBK,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbI,EAAgB,mCAAG,WAAMC,GAAN,yFACPP,EAAAA,EAAAA,IAAA,wBACJH,EADI,4DAC4DU,IAFrD,uBACtBL,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","service/apiMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 15px;\n  padding-left: 25px;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  width: 225px;\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 15vw;\n  margin-bottom: 10px;\n`;\n\nexport const CardTitle = styled.p`\n  font-weight: 700;\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n\nexport const Character = styled.p`\n  font-size: 14px;\n  margin-bottom: 10px;\n`;\n\nexport const NoCast = styled.p`\n  margin-top: 15px;\n  margin-bottom: 10px;\n  font-size: 14px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as apiMovies from 'service/apiMovies';\nimport {\n  List,\n  Item,\n  Image,\n  CardTitle,\n  Character,\n  NoCast,\n} from '../Cast/Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus('pending');\n\n    async function getCast() {\n      try {\n        const { cast } = await apiMovies.getCastById(movieId);\n        setCast(cast);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n    getCast();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <>\n      {status === 'rejected' && <h3>{error}</h3>}\n      <List>\n        {status === 'resolved' &&\n          cast.map(({ name, profile_path, id, character }) => (\n            <Item key={id}>\n              {profile_path !== null && (\n                <Image\n                  src={`http://image.tmdb.org/t/p/w780/${profile_path}`}\n                  alt=\"foto\"\n                />\n              )}\n              <CardTitle>{name}</CardTitle>\n              <Character>Character: {character}</Character>\n            </Item>\n          ))}\n      </List>\n      {status === 'resolved' && cast.length === 0 && (\n        <NoCast>We dont have any cast for this movie</NoCast>\n      )}\n    </>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.array,\n  error: PropTypes.any,\n  status: PropTypes.string,\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst searchParams = new URLSearchParams({\n  api_key: 'f36ca5f08fabb02f79441db3f5d1a857',\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getMovie = async () => {\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`);\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n  return data;\n};\n\nexport const getCastById = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n  return data;\n};\n\nexport const getRewiesById = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n  return data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const { data } = await axios.get(\n    `/search/movie?${searchParams}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return data;\n};\n"],"names":["List","styled","Item","Image","CardTitle","Character","NoCast","useState","cast","setCast","status","setStatus","error","setError","movieId","useParams","useEffect","apiMovies","message","getCast","map","name","profile_path","id","character","src","alt","length","searchParams","URLSearchParams","api_key","axios","getMovie","data","getMovieById","getCastById","getRewiesById","getMoviesByQuery","query"],"sourceRoot":""}